<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Homepage</title>
    <url>/2024/04/23/homepage/index/</url>
    <content><![CDATA[<p>​	Welcome to <a href="zhongruixie.github.io">My personal homepage</a>! There are some imformation that help you learn more about me. If you want to interact with me, here is my <a href="mailto:xzr0518@outlook.com">E-mail</a>, and you can also visit my <a href="https://github.com/ZhongruiXie/">GitHub</a>.</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>​	I am an undergraduate student at <a href="https://www.zju.edu.cn/">ZheJiang University</a>, whose major is atmosphere science. You can find my CV  for Chinese  <a href="/PDF/CV.pdf">here</a>.</p>
<p>more to add……</p>
<h1 id="Blog-Description"><a href="#Blog-Description" class="headerlink" title="Blog Description"></a>Blog Description</h1><h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Show pictures used matplotlib, or other fiction I had achieved.</p>
<h3 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><p>Some homework here, and some small project.</p>
<h3 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h3><p>Notebooks for some courses.</p>
<h3 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h3><p>For I use Python more often, there may be nothing.</p>
<h3 id="ArcGIS"><a href="#ArcGIS" class="headerlink" title="ArcGIS"></a>ArcGIS</h3><p>Some projects, may be nothing.</p>
]]></content>
  </entry>
  <entry>
    <title>How to start a new post</title>
    <url>/2024/07/29/How%20to%20start%20a%20new%20post/</url>
    <content><![CDATA[<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>This blog is in case I myself forget how to write the notes I took in the blog.</p>
<h1 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h1><p><strong>Refer to these two websites:</strong></p>
<p><a href="https://hexo.io/">Hexo</a> and <a href="https://theme-next.js.org/"> NexT </a></p>
<p><strong>Some useful commands：</strong></p>
<p>Create a new blog</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &#x27;blog_name&#x27;</span><br></pre></td></tr></table></figure>

<p>Clean</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>Preview</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>Deploy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>My first plt program</title>
    <url>/2024/07/29/My%20first%20plt%20program/My%20first%20plt%20program/</url>
    <content><![CDATA[<p><strong>Map the global monthly average temperature for January 2024</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cartopy.crs <span class="keyword">as</span> ccrs</span><br><span class="line"><span class="keyword">import</span> cartopy.feature <span class="keyword">as</span> cfeature</span><br><span class="line"><span class="keyword">from</span> cartopy.mpl.gridliner <span class="keyword">import</span> LONGITUDE_FORMATTER, LATITUDE_FORMATTER</span><br><span class="line"></span><br><span class="line">obj=nc.Dataset(<span class="string">&quot;air.mon.mean.nc&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment">#使用netCDF4.Dataset打开气温数据文件air.mon.mean.nc。</span></span><br><span class="line">lons=obj.variables[<span class="string">&#x27;lon&#x27;</span>][:].data</span><br><span class="line">lats=obj.variables[<span class="string">&#x27;lat&#x27;</span>][:].data</span><br><span class="line">times=obj.variables[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">levels=obj.variables[<span class="string">&#x27;level&#x27;</span>][:].data</span><br><span class="line">airs=obj.variables[<span class="string">&#x27;air&#x27;</span>][:].data</span><br><span class="line"><span class="comment">#从NetCDF对象中提取经度(lons)、纬度(lats)、时间(times)、高度层(levels)和气温数据(airs)。</span></span><br><span class="line">airs[airs==-<span class="number">9.96921e+36</span>]=np.nan</span><br><span class="line"><span class="comment">#将缺失值（-9.96921e+36）替换为NaN</span></span><br><span class="line"></span><br><span class="line">times_units = nc.num2date(times[:], times.units)</span><br><span class="line"><span class="comment">#通过nc.num2date将时间变量转换为实际的日期时间对象。</span></span><br><span class="line">selected_level = np.where(levels == <span class="number">500</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment">#在levels中找到500 hPa对应的索引</span></span><br><span class="line"><span class="keyword">for</span> i, time <span class="keyword">in</span> <span class="built_in">enumerate</span>(times_units):</span><br><span class="line">    <span class="keyword">if</span> time.year == <span class="number">2024</span> <span class="keyword">and</span> time.month == <span class="number">1</span>:</span><br><span class="line">        selected_time = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#遍历时间，找到2024年1月对应的时间索引</span></span><br><span class="line">monthly_mean_air=airs[selected_time,selected_level,:,:]</span><br><span class="line"><span class="comment">#根据选定的时间和高度层索引提取对应的气温数据</span></span><br><span class="line"></span><br><span class="line">lon_step=lons[<span class="number">1</span>]-lons[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#计算经度间隔(lon_step)。</span></span><br><span class="line">lons_extended = np.concatenate([lons - <span class="number">360</span> - lon_step, lons, lons + <span class="number">360</span> + lon_step])</span><br><span class="line"><span class="comment">#创建扩展的经度数组(lons_extended)，通过在原始经度数组两端各自扩展一份，来解决0°经线处可能出现的数据断裂问题。</span></span><br><span class="line">monthly_mean_air_extended = np.concatenate([monthly_mean_air, monthly_mean_air, monthly_mean_air], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#同样地，对应扩展气温数据(monthly_mean_air_extended)</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>),dpi=<span class="number">300</span>)</span><br><span class="line"><span class="comment">#设置图形大小和分辨率</span></span><br><span class="line">ax=plt.axes(projection=ccrs.PlateCarree())</span><br><span class="line"><span class="comment">#创建一个使用PlateCarree投影的绘图轴(ax)。</span></span><br><span class="line">temperature = ax.contourf(lons_extended, lats,monthly_mean_air_extended,<span class="number">25</span>, transform=ccrs.PlateCarree(), cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line"><span class="comment">#使用contourf方法绘制扩展的气温数据，使用coolwarm色标表示气温值。这里设置25个梯度，实际可以更密。</span></span><br><span class="line">ax.add_feature(cfeature.COASTLINE)</span><br><span class="line">ax.add_feature(cfeature.BORDERS,linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="comment">#添加海岸线和国界线以增强地图的可读性。</span></span><br><span class="line">cbar = plt.colorbar(temperature, orientation=<span class="string">&#x27;vertical&#x27;</span>, shrink=<span class="number">0.62</span>)</span><br><span class="line">cbar.set_label(<span class="string">&#x27;Temperature (°C)&#x27;</span>)</span><br><span class="line"><span class="comment">#添加色标，说明气温的单位</span></span><br><span class="line"></span><br><span class="line">gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=<span class="literal">True</span>,</span><br><span class="line">                  linewidth=<span class="number">1</span>, color=<span class="string">&#x27;gray&#x27;</span>, alpha=<span class="number">0.5</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">gl.xlabels_top = <span class="literal">False</span>  </span><br><span class="line">gl.ylabels_right = <span class="literal">False</span>  </span><br><span class="line"><span class="comment">#添加网格线，并设置不在顶部和右侧显示标签。</span></span><br><span class="line">gl.xformatter = LONGITUDE_FORMATTER</span><br><span class="line">gl.yformatter = LATITUDE_FORMATTER</span><br><span class="line"><span class="comment">#设置经度和纬度标签的格式</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;Global Monthly Mean Air Temperature at 500 hPa in January 2024&#x27;</span>)</span><br><span class="line"><span class="comment">#添加标题</span></span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#显示绘制的地图</span></span><br><span class="line">obj.close()</span><br><span class="line"><span class="comment">#使用obj.close()关闭打开的NetCDF数据文件，以释放资源</span></span><br></pre></td></tr></table></figure>

<p><strong>Note</strong></p>
<p>Here I use the netCDF library, but in my later study and practice, I found the xarray library more convenient</p>
<p>SHOW：<img src="/images/100.jpg" alt="100"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/04/24/test/index/</url>
    <content><![CDATA[<p>​	more to add…</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
</search>
